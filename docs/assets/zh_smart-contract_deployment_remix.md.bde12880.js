import{_ as s,o as a,c as e,O as n}from"./chunks/framework.62a149d4.js";const o="/assets/remix-01.e8288556.png",p="/assets/remix-02.9635725b.png",t="/assets/remix-03.cea127cd.png",l="/assets/remix-04.296584d2.png",r="/assets/remix-05.c5585fd2.png",i="/assets/remix-06.4c3e37dc.png",k=JSON.parse('{"title":"使用Remix部署","description":"","frontmatter":{},"headers":[],"relativePath":"zh/smart-contract/deployment/remix.md","filePath":"zh/smart-contract/deployment/remix.md"}'),c={name:"zh/smart-contract/deployment/remix.md"},m=n('<h1 id="使用remix部署" tabindex="-1">使用Remix部署 <a class="header-anchor" href="#使用remix部署" aria-label="Permalink to &quot;使用Remix部署&quot;">​</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p><a href="https://remix.ethereum.org" target="_blank" rel="noreferrer">Remix</a>是目前以太坊上最常被使用的智能合约开发环境之一。基于SCS Chain兼容以太坊的特性，Remix可直接与SCS Chain网络一起使用。 本教程将介绍使用Remix IDE在SCS Chain开发节点上部署和创建基于Solidity的智能合约的过程。</p><h2 id="查看先决条件" tabindex="-1">查看先决条件 <a class="header-anchor" href="#查看先决条件" aria-label="Permalink to &quot;查看先决条件&quot;">​</a></h2><p>在开始之前，您将需要准备以下内容：</p><ul><li>安装且配置完毕的<a href="https://metamask.io/" target="_blank" rel="noreferrer">MetaMask</a>以使用您的开发节点</li></ul><h2 id="开始使用remix" tabindex="-1">开始使用Remix <a class="header-anchor" href="#开始使用remix" aria-label="Permalink to &quot;开始使用Remix&quot;">​</a></h2><p>现在，您可以启动Remix进行操作。在主页面的Featured Plugins下选择 SOLIDITY为Solidity开发配置Remix，接着导航至File Explorers查看。</p><p><img src="'+o+'" alt=""></p><p>您将会需要创建一个新文件以保存Solidity智能合约。点击File Explorers下方的+按钮并在弹窗中输入文件名称MyToken.sol。</p><p><img src="'+p+`" alt=""></p><p>接着，将以下智能合约粘贴至弹窗的编辑框内：</p><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.9</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyToken</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ERC20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">) </span><span style="color:#82AAFF;">ERC20</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">&quot;MyToken&quot;, &quot;MTK&quot;) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">_mint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg.sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decimals</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这是一个基于最新OpenZeppelin SRC-20模板编写的简易版SRC-20合约。该合约使用MYTOK作为MyToken的符号，并为合约创建者铸造初始Token。</p><p>接着，导向至侧边选项的Compile并点击Compile MyToken.sol按钮。</p><p>您将会看到Remix下载了所有OpenZeppelin的依赖项并完成合约编译。</p><p>请在MetaMask点击Next授权Remix使用您所选取的账户。</p><p>接着返回Remix界面，您会看到您想要用来部署的账户已经通过MetaMask授权登入。</p><p>确认无误之后，请点击Deploy。</p><p><img src="`+t+'" alt=""></p><p>随后，MetaMask将跳出弹窗要求您确认此次部署合约的交易。</p><p>在您点击Confirm后部署也随之完成，您将会在MetaMask上看到您的交易记录。与此同时，合约也将会在Remix中的Deployed Contracts下出现。</p><p>成功部署合约之后，您便可通过Remix与智能合约进行交互。</p><p>将页面下滑，找到MYTOKEN At，如果您复制合约地址并将它粘贴在balanceOf字段中，您可以看到用户地址上的账户全部余额。点击合约名称和地址旁边的按钮可复制合约地址。</p><p><img src="'+l+'" alt=""></p><h2 id="通过metamask与src-20进行交互" tabindex="-1">通过MetaMask与SRC-20进行交互 <a class="header-anchor" href="#通过metamask与src-20进行交互" aria-label="Permalink to &quot;通过MetaMask与SRC-20进行交互&quot;">​</a></h2><p>现在，打开MetaMask添加刚部署的SRC-20 Token。在操作之前先确认您已在Remix上复制了合约地址。回到MetaMask，如下图所示，点击Add Token。请确保您现在所操作的账户为已部署合约的账户。</p><p><img src="'+r+'" alt=""></p><p>将已复制的合约地址粘贴至Custom Token字段内，与此同时Token Symbol和Decimals of Precision字段会自动填充。</p><p><img src="'+i+'" alt=""></p>',30),C=[m];function y(D,d,A,F,h,x){return a(),e("div",null,C)}const u=s(c,[["render",y]]);export{k as __pageData,u as default};
