import{_ as e,o as t,c as a,O as o}from"./chunks/framework.62a149d4.js";const s="/assets/remix-01.e8288556.png",n="/assets/remix-02.9635725b.png",l="/assets/remix-03.ff4d2b4b.png",i="/assets/remix-04.296584d2.png",r="/assets/remix-05.e470c12d.png",p="/assets/remix-06.0f2e712d.png",k=JSON.parse('{"title":"Deploying with Remix","description":"","frontmatter":{},"headers":[],"relativePath":"smart-contract/deployment/remix.md","filePath":"smart-contract/deployment/remix.md"}'),c={name:"smart-contract/deployment/remix.md"},d=o('<h1 id="deploying-with-remix" tabindex="-1">Deploying with Remix <a class="header-anchor" href="#deploying-with-remix" aria-label="Permalink to &quot;Deploying with Remix&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><a href="https://remix.ethereum.org/" target="_blank" rel="noreferrer">Remix</a> is one of the most commonly used development environments for smart contracts on Ethereum. Due to SCS Chain&#39;s compatibility with Ethereum, Remix can be used directly with the SCS Chain network. This tutorial will guide you through the process of deploying and creating Solidity-based smart contracts on SCS Chain using the Remix IDE.</p><h2 id="check-prerequisites" tabindex="-1">Check Prerequisites <a class="header-anchor" href="#check-prerequisites" aria-label="Permalink to &quot;Check Prerequisites&quot;">​</a></h2><p>Before getting started, you will need the following:</p><ul><li>Installed and configured <a href="https://metamask.io/" target="_blank" rel="noreferrer">MetaMask</a> to use your development node.</li></ul><h2 id="getting-started-with-remix" tabindex="-1">Getting Started with Remix <a class="header-anchor" href="#getting-started-with-remix" aria-label="Permalink to &quot;Getting Started with Remix&quot;">​</a></h2><p>Now, you can launch Remix and get started. Select SOLIDITY under Featured Plugins on the main page to configure Remix for Solidity development. Then, navigate to the File Explorers.</p><p><img src="'+s+'" alt=""></p><p>You will need to create a new file to save your Solidity smart contract. Click the &quot;+&quot; button below File Explorers and enter the file name &quot;MyToken.sol&quot; in the pop-up window.</p><p><img src="'+n+`" alt=""></p><p>Next, paste the following smart contract into the editing box in the pop-up window:</p><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.9</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyToken</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ERC20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">) </span><span style="color:#82AAFF;">ERC20</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">&quot;MyToken&quot;, &quot;MTK&quot;) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">_mint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg.sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decimals</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This is a simplified version of an SRC-20 contract based on the latest OpenZeppelin SRC-20 template. The contract uses &quot;MYTOK&quot; as the symbol for the token and mints the initial tokens for the contract creator.</p><p>Next, navigate to the &quot;Compile&quot; tab in the side menu and click the &quot;Compile MyToken.sol&quot; button.</p><p>You will see that Remix downloads all the dependencies from OpenZeppelin and completes the contract compilation.</p><p>In MetaMask, click &quot;Next&quot; to authorize Remix to use your selected account.</p><p>Then, return to the Remix interface, and you will see that the account you want to use for deployment is already logged in via MetaMask.</p><p>Once you have verified everything, click &quot;Deploy&quot; to proceed.</p><p><img src="`+l+'" alt=""></p><p>Subsequently, MetaMask will prompt a pop-up asking you to confirm the transaction for deploying the contract.</p><p>Once you click &quot;Confirm,&quot; the deployment will be completed, and you will see the transaction record in MetaMask. At the same time, the contract will appear under &quot;Deployed Contracts&quot; in Remix.</p><p>After successfully deploying the contract, you can interact with the smart contract through Remix.</p><p>Scroll down the page and find &quot;MYTOKEN At.&quot; If you copy the contract address and paste it into the &quot;balanceOf&quot; field, you will see the total balance of the user&#39;s address. You can click the button next to the contract name and address to copy the contract address.</p><p><img src="'+i+'" alt=""></p><h2 id="to-interact-with-the-deployed-src-20-token-using-metamask" tabindex="-1">To interact with the deployed SRC-20 token using MetaMask <a class="header-anchor" href="#to-interact-with-the-deployed-src-20-token-using-metamask" aria-label="Permalink to &quot;To interact with the deployed SRC-20 token using MetaMask&quot;">​</a></h2><ol><li>Open MetaMask and ensure that you have copied the contract address from Remix.</li><li>Go to the MetaMask interface and click on &quot;Add Token,&quot; as shown in the screenshot below.</li><li>Make sure you are using the MetaMask account that deployed the contract.</li></ol><p><img src="'+r+'" alt=""></p><p><img src="'+p+'" alt=""></p>',29),h=[d];function u(m,y,C,g,D,f){return t(),a("div",null,h)}const x=e(c,[["render",u]]);export{k as __pageData,x as default};
