import{_ as s,o as a,c as n,O as l}from"./chunks/framework.62a149d4.js";const A=JSON.parse('{"title":"Ethers.js","description":"","frontmatter":{},"headers":[],"relativePath":"sdk/ethersjs.md","filePath":"sdk/ethersjs.md"}'),o={name:"sdk/ethersjs.md"},e=l(`<h1 id="ethers-js" tabindex="-1">Ethers.js <a class="header-anchor" href="#ethers-js" aria-label="Permalink to &quot;Ethers.js&quot;">​</a></h1><hr><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Ethers.js code library provides a variety of tools for interacting with Ethereum nodes using JavaScript, similar to Web3.js. SCS Chain offers an API that is similar to Ethereum and fully compatible with Ethereum-style JSON RPC calls. Therefore, developers can leverage this compatibility and use the Ethers.js library to interact with SCS Chain nodes in the same way as with Ethereum. You can learn more about Ethers.js in this article.</p><h2 id="creating-a-project" tabindex="-1">Creating a Project <a class="header-anchor" href="#creating-a-project" aria-label="Permalink to &quot;Creating a Project&quot;">​</a></h2><p>First, you need to create a directory to store all the files you will create in this tutorial:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project-demo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project-demo</span></span></code></pre></div><p>You will need to install the Ethers.js code library and the Solidity compiler. You can install both npm packages by running the following command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ethers</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solc@0.8.0</span></span></code></pre></div><h2 id="setting-up-ethers-provider" tabindex="-1">Setting up Ethers Provider <a class="header-anchor" href="#setting-up-ethers-provider" aria-label="Permalink to &quot;Setting up Ethers Provider&quot;">​</a></h2><p>You will be creating scripts that perform different functions such as sending transactions, deploying contracts, and interacting with a deployed contract. In most of the scripts, you will need to create an Ethers provider to interact with the network.</p><ol><li>Importing the Ethers Code Library</li><li>Define the providerRPC object, including the network configuration on which you want to send transactions. You need to include the name, rpc, and chainId of the network.</li><li>Create a provider using the ethers.JsonRpcProvider function.</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. Add the Ethers provider logic here:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. Define network configurations</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> providerRPC </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">scs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SCS Chain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rpc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">INSERT_RPC_API_ENDPOINT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">chainId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1969</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// testnet 1969, mainnet 1970</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. Create ethers provider</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> provider </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JsonRpcProvider</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  providerRPC</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rpc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">chainId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> providerRPC</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">chainId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> providerRPC</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><hr><h2 id="checking-balances" tabindex="-1">Checking Balances <a class="header-anchor" href="#checking-balances" aria-label="Permalink to &quot;Checking Balances&quot;">​</a></h2><p>First, you can run the following command to create a balances.js file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">balances.js</span></span></code></pre></div><p>Next, you will create a script for this file and follow these steps:</p><ol><li>Set up the Ethers provider.</li><li>Define the addressFrom and addressTo variables.</li><li>Create an asynchronous balances function that wraps the provider.getBalance function.</li><li>Use the provider.getBalance function to retrieve the balances of the addressFrom and addressTo addresses. You can also use the ethers.formatEther function to convert the balances into a readable format in ETH units.</li><li>Finally, call the balances function.</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. Add the Ethers provider logic here:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. Create address variables</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addressFrom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ADDRESS-FROM-HERE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addressTo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ADDRESS-TO-HERE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. Create balances function</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> balances </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 4. Fetch balances</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">balanceFrom</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">formatEther</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">provider</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBalance</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">addressFrom</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">balanceTo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">formatEther</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">provider</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBalance</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">addressTo</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">The balance of </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">addressFrom</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">balanceFrom</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> SCS</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">The balance of </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">addressTo</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">balanceTo</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> SCS</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 5. Call the balances function</span></span>
<span class="line"><span style="color:#82AAFF;">balances</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can run the following command to execute the script and retrieve the account balances:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">balances.js</span></span></code></pre></div><hr><h2 id="sending-transactions" tabindex="-1">Sending Transactions <a class="header-anchor" href="#sending-transactions" aria-label="Permalink to &quot;Sending Transactions&quot;">​</a></h2><p>First, you can run the following command to create a transaction.js file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">transaction.js</span></span></code></pre></div><p>Next, you will create a script for this file and follow these steps:</p><ol><li>Set up the Ethers provider.</li><li>Define the privateKey and addressTo variables. Here, you need the private key to create a wallet instance. Note: This operation is for demonstration purposes only.Do not store your private key in a JavaScript file.</li><li>Create a wallet using the privateKey and provider from the previous steps. This wallet instance will be used to sign transactions.</li><li>Create an asynchronous send function that encapsulates the transaction target and the wallet.sendTransaction function.</li><li>Create a transaction object that only requires the recipient address and the amount to send. Note that you can use ethers.parseEther, which handles the necessary unit conversion from Ether to Wei, just like using ethers.parseUnits(value, &#39;ether&#39;).</li><li>Use the wallet.sendTransaction function to send the transaction and then await the completion of the transaction and retrieve the transaction receipt.</li><li>Finally, call the send function.</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. Add the Ethers provider logic here:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {...}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. Create account variables</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> account_from </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">privateKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YOUR-PRIVATE-KEY-HERE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addressTo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ADDRESS-TO-HERE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. Create wallet</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> wallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Wallet</span><span style="color:#A6ACCD;">(account_from</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">privateKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> provider)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. Create send function</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> send </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Attempting to send transaction from </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">wallet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> to </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">addressTo</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 5. Create tx object</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    to</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addressTo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseEther</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 6. Sign and send tx - wait for receipt</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createReceipt</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendTransaction</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tx</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createReceipt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Transaction successful with hash: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">createReceipt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 7. Call the send function</span></span>
<span class="line"><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can run the following command in the terminal to execute the script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">transaction.js</span></span></code></pre></div>`,31),p=[e];function t(c,r,i,y,D,F){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
